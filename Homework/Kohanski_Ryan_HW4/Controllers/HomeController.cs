using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.AspNetCore.Mvc.Rendering;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using static Microsoft.EntityFrameworkCore.DbLoggerCategory;
using Kohanski_Ryan_HW4.DAL;
using Kohanski_Ryan_HW4.Models;
using Microsoft.EntityFrameworkCore;
using Kohanski_Ryan_HW4.Models.ViewModels;

// For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860

namespace Kohanski_Ryan_HW4.Controllers
{
    // For the greater than less than buttons
    public enum SelectionType { GreaterThan, LessThan }

    public class HomeController : Controller
    {
        // Add the code to hold an instance of your AppDbContext in a private variable and the constructor to populate it
        private AppDbContext _db;
        public HomeController(AppDbContext context)
        {
            _db = context;
        }

        // GET: /<controller>/
        // Quick Search
        // you don’t need to include the ? to make it nullable (Strings are inherently nullable).
        public IActionResult Index(String SearchString)
        {
            //return View(_db.Movies.Include(m => m.Genre).ToList());

            // Create a LINQ query to filter the movies you want
            var query = from m in _db.Movies
                        select m;
            // Check to see if SearchString is null.  If it is, it is the first time they opened the page or they didn’t search for anything.
            // If SearchString is null, display all the records.  If the search string is not null, use LINQ to limit the query to movies whose author or title contain the requested string
            if (SearchString != null && SearchString != "")
            {
                query = query.Where(m => m.Description.Contains(SearchString) || m.Title.Contains(SearchString));
            }

            //execute the query
            // Use the .ToList() method to execute the query
            List<Movie> SelectedMovies = query.Include(m => m.Genre).ToList();

            //Populate the counts for all books & selected books
            // puts the total movie count in the ViewBag.  (Hint: the List object has a .Count method)
            // Add the total movies count and the selected movie count for to the view bag so the results page will show “Showing X of Y Movies”
            ViewBag.AllMovieCount = _db.Movies.Count();
            ViewBag.SelectedMovieCount = SelectedMovies.Count();

            return View(SelectedMovies.OrderByDescending(m => m.VoteAverage));
        }

        // Detailed Search
        public IActionResult DetailedSearch()
        {
            //populate the drop-down of genres
            ViewBag.AllGenres = GetAllGenres();

            return View();
        }

        // Add an action method called DisplaySearchResults on your HomeController to respond to the GET request generated by the DetailedSearch view.  
        // This method should send the user back to the Index page with a filtered list of movies.
        // The method signature of the DisplaySearchResults action will need to include a parameter for an instance of the ViewModel class.  
        public IActionResult DisplaySearchResults(SearchViewModel svm)
        {
            // Use LINQ to filter the data set of movies to only display the movies that meet the criteria.  
            var query = from m in _db.Movies
                        select m;

            if (svm.TitleSearch != null & svm.TitleSearch != "") //user wants to search by name
            {
                query = query.Where(m => m.Title.Contains(svm.TitleSearch) || m.Title.Contains(svm.TitleSearch));
            }

            if (svm.DescriptionSearch != null & svm.DescriptionSearch != "")
            {
                query = query.Where(m => m.Description.Contains(svm.DescriptionSearch));
            }

            if (svm.GenreSearch != 0)
            {
                query = query.Where(m => m.Genre.GenreID == svm.GenreSearch);
            }

            if (svm.RatingSearch != null)
            {
                //if code gets this far, we have a valid price

                if (svm.SelectionType == SelectionType.GreaterThan)
                {
                    query = query.Where(m => m.VoteAverage >= svm.RatingSearch);
                }
                else //selection type is less than
                {
                    query = query.Where(m => m.VoteAverage <= svm.RatingSearch);
                }
            }

            if (svm.DateSearch != null)
            {
                query = query.Where(m => m.ReleaseDate >= svm.DateSearch);
            }

            List<Movie> SelectedMovies = query.Include(m => m.Genre).ToList();

            // Populate the counts for all books & selected books
            ViewBag.AllMovieCount = _db.Movies.Count();
            ViewBag.SelectedMovieCount = SelectedMovies.Count();


            return View("Index", SelectedMovies.OrderByDescending(m => m.VoteAverage));
        }

        // Details Pages
        public IActionResult Details(int? id)
        {
            if (id == null) //MovieID not specified
            {
                return View("Error", new String[] { "MovieID not specified - which movie do you want to view?" });
            }

            Movie movie = _db.Movies.Include(m => m.Genre).FirstOrDefault(m => m.MovieID == id);

            if (movie == null) //Movie does not exist in database
            {
                return View("Error", new String[] { "Movie not found in database" });
            }

            //if code gets this far, all is well
            return View(movie);
        }

        // Drop Down List For Genres
        public SelectList GetAllGenres()
        {
            List<Genre> AllGenres = _db.Genres.ToList();

            //Add a fake genre to allow user to select nothing
            Genre NoGenre = new Genre() { GenreID = 0, GenreName = "All Genres" };
            AllGenres.Add(NoGenre);

            //Turn this into a select list
            SelectList slAllGenres = new SelectList(AllGenres.OrderBy(g => g.GenreID), "GenreID", "GenreName");

            //return the select list you just created
            return slAllGenres;

        }
    }
}
